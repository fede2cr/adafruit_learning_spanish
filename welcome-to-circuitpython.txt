Desinstalando CircuitPython

Muchas de nuestras tarjetas se pueden utilizar con múltiples lenguajes de programación. Por ejemplo la Circuit Playground Express puede ser usada con MakeCode, Code.org CS Discoveries, CircuitPython y Arduino.

¿Puede que hayas probado CircuitPython y ahora quieres regresar a MakeCode o Arduino? No es problema. ¡Siempre puedes remover y reinstalar CircuitPython cuando lo desees! ¡Incluso puedes cambiar de parecer todos los días!

Respalda tu Código

Antes de desinstalar CircuitPython, no te olvides de realizar un respaldo del código que tienes en la pequeña unidad de disco. Eso significa main.py o code.py y otros archivos, la carpeta lib, etc. Es posible que pierdas estos archivos cuando remueves CircuitPython, ¡por lo que los respaldos son clave! Solo arrastra los archivos a una carpeta en tu laptop o computadora de escritorio, como lo harías con cualquier otra memoria USB.

Pasándose la Circuit Playground Express a MakeCode

En la Circuit Playground Express (por el momento esto NO aplica para la Circuit Playground Bluefruit), si deseas devolverte a usar MakeCode, es realmente sencillo. Visita makecode.adafruit.com (https://adafru.it/wpC) y encuentra el programa que deseas subir. Da click en Download para descargar el archivo .uf2 que genera Makecode.

Ahora da doble click en el botón de reset de tu tarjeta CircuitPython hasta que veas las luces LED prender en verte y luego que aparezca el directorio ...BOOT .

Ahora encuentra el archivo .uf2 descargado de MakeCode y arrástralo a la unidad de disco ...BOOT.

Tu código MakeCode ahora se está ejecutando y CircuitPython ha sido eliminado. De ahora en adelante solo debes dar un solo click al botón de reset.

Paśandose a Arduino

Si quieres mover tu firmware hacia Arduino, es muy sencillo.

Comienza por conectar tu tarjeta y dándole doble click al botón de reset hasta que recibas las luces LED integradas de color verde – igual que con MakeCode.

Dentro del IDE de Arduno, selecciona la tarjeta correcta, diciéndole que use la Circuit Playground Express, y seleccionando el puerto correspondiente:

Crear un nuevo programa ejemplo para Parpadear:

// la función setup se ejecuta cuando presionas reset o prendes la tarjeta
void setup() {
// inicialice el pin 13 para salida.
pinMode(13, OUTPUT);
}
// la función de loop se repite una y otra vez
void loop() {
digitalWrite(13, HIGH);
// prenda el LED (HIGH o alto, es el nivel de voltaje)
delay(1000);
// espere un segundo
digitalWrite(13, LOW);
// apaga el LED pasando el voltaje a LOW (bajo)
delay(1000);
// espere un segundo
}

Asegúrate que los LEDs todavía están de color verde, da click en Upload para subir el código de parpadeo. Una vez que ha subido correctamente el puerto serial va a cambiar, ¡así que seleccione el nuevo puerto!

Una vez que el código de parpadeo ha sido subido, no es necesario volver a dar doble click en el botón de reset para entrar en modo de booteo, Arduino va a resetear la tarjeta de forma automática cuando subes nuevo firmware.


Instalación sin UF2

¡Esta página de instalación es solo necesaria si no tienes un gestor de arranque UF2 instalado (donde sale ...BOOT y le arrastramos archivos)! Esta página es para tarjeta no-Express como Feather M0, Arduino Zero y M0 y otras tarjetas a la medida con chips ATSAMD21.

Subiendo con Bossac – Para las Feather M0 no-Express y Arduino Zero

Nuestras tarjetas viejas de formato Feather con chips M0 no vienen con UF2, sino con un gestor de arranque más sencillo llamado bossa. Esto es lo que está instalado en los Arduino Zero y otras tarjetas para CircuitPython que usan chips como ATSAMDx1 o nRF52840. Es el único método de instalación que puedes utilizar si el archivo de instalación de CircuitPython es de tipo .bin en lugar de un .uf2 .

¡Vamos a la línea de comando!

Para subir firmware con bossac requiere utilizar la línea de comando de tu computadora. En Windows, se llama cmd o herramienta powershell. ¡En mac o Linux, usar Terminal!

Descarga el último firmware CircuitPython

Lo primero que vas a querer hacer es descargar la última versión de CircuitPython. Desde Abril del 2019, existen dos páginas web para descargar el archivo .bin apropiado. Adafruit está migrando sus archivos hacia CircuitPython.org (https://adafru.it/Em8). Se sugiere que busques el archivo .bin compatible para tu tarjeta primero ahí, buscando la tarjeta. Solo tarjetas compatibles que han recibido modificaciones específicas para definir sus pines apropiados van a ser listados en el sitio, por lo cual los desarrolladores deberían enviar sus material (por medio de un pull request) si tienen una tarjeta con CircuitPython la cual desean que salga listada.

Da click al botón verde abajo para buscar tu tarjeta y encontrar el archivo apropiado.

https://adafru.it/Em8

De forma alternativa, use GitHub

Por ahora, los archivos de tarjetas para CircuitPython también están disponibles en el repositorio de CircuitPython de Adafruit, aunque a futuro se desea mover a un repositorio separado. Si tienes problemas con CircuitPython.org, trata de descargarlo de GitHub utilizando este segundo botón verde.

https://adafru.it/vlF

Una vez descargado, salvar el archivo .bin en tu equipo de escritorio, ¡ya casi lo vas a ocupar!

Si estás usando Windows 7, debes instalar el controlador (hablamos de ello, en esta página) (https://adafru.it/Bfd) para tener acceso al puerto COM.


Descargando BOSSA

Una vez que tienes el archivo con el firmware, vas a necesitar descargar la herramienta BOSSA, la cual puede cargarle firmware a tarjetas con chips SAMD21/51. Esta herramienta es usada internamente por el IDE de Arduino cuando programa estas tarjetas, sin embargo lo puedes usar para subir tu firmware a la medida.

¡Ten cuidado que necesitas una versión 1.7.0 o superior de bossac para programar tarjetas con chips SAMD21 y SAMD51! Versionas de BOSSA anteriores a 1.7.0 no van a funcionar porque no saben hablar con chips SAMD21/51. También tener cuidado que versiones 1.9.0 o más nuevas pueden tener un problema de incompatibilidad al cambiar sus parámetros de línea de comando y puede eliminar tu gestor de arranque si no está protegido (Las tarjetas de Adafruit se envían con gestores de arranque protegidos). Sigue las instrucciones a continuación con mucho cuidado, dependiendo de que versión tengas.

Para subir firmware con bossac (la herramienta de línea de comando de BOSSA) primero descar la última versión de aquí (https://adafru.it/Bfe).

La versión ming32 es para Windows, la versión apple-darwin para Mac OSX y varios opciones de Linux para Linux.

Bossac solo trabaja con archivos .bin, ¡no funciona con archivos .uf2!

Pruebe bossac

Abra una terminal y navegue por la carpeta con la herramienta bossac. Ahora revise que la aplicación funciona, probando con la opción --help con bossac --help


Si estás utilizando Linux o Mac OSX, vas a necesitar agregar un ./ para decirle que ejecute bossac desde el directorio actual, así ./bossac --help

¡Asegúrate de que observes BOSSA versión 1.7.0 o superior! Y nota la observación abajo sobre la versión 1.9.0 o superior. Si ves una versión anterior es porque descargaste por error una versión anterior y no va a funcionar para subirle a chips SAMD21. Regresa y descarga la última versión del repositorio de GitHub de BOSSA (https://adafru.it/s1B) como se mencionó arriba.

Selección de puerto para Mac OS

Vas a necesitar saber que puerto usar si estás en Mac.

En la misma terminal, ejecuta el comando ls /dev/cu.* . Nota los puertos listados, ahora conecta tu tarjeta y ejecuta el comando de nuevo. El dispositivo listado puede llamarse algo similar a /dev/cu.usbmodem14301. Toma nota del nombre del puerto para usarlo en la sección que sigue.

Entra en el gestor de arranque

Vas a tener que darle un empujón a la tarjeta para que entre en modo de gestor de arranque. Lo haces dándole doble-click al botón de reset en la tarjeta. El LED rojo “#13” va a parpadear. Si estás usando un Arduino Zero, asegúrate de que estás conectado al puerto USB nativo y no al puerto de depuración/programación.

Una nota importante, si estás utilizando un Arduino M0 de Arduino.org, vas a necesitar reemplazar su gestor de arranque con el gestor de arranque de Arduino Zero para que pueda trabajar con BOSSA. Para esto, instala las tarjetas Arduino/Genuino Zero en el IDE de Arduino y luego sigue estos pasos para subir el gestor de arranque (https://adafru.it/s1D) (usando el puerto de programación en la tarjeta). Una vez que has agregado el gestor de arranque de las Arduino Zero, vas a poder utilizar la M0 con bossac como se describe abajo.


Ejecutando el comando bossac

Con tu tarjeta conectada y corriendo el gestor de arranque, estás listo para subirle el firmware de CircuitPython a la tarjeta.

Copia el archivo .bin con el firmware al mismo directorio donde reside la herramienta bossac, y luego en una terminal entre en la misma carpeta y ejecute los siguiente comandos, dependiendo de la versión de bossac que tengas.

Con bossac versiones 1.9 o superiores debes usar el parámetro --offset en la línea de comando, y debe tener el valor correcto para tu tarjeta.

Con bossac versiones 1.9 o superior, le debes indicar en el pámetro --offset donde debe comenzar a escribir el firmware en la memoria flash. Este parámetro se agregó desde bossac 1.8.0 por omisión en 0x2000, pero en 1.9 por omisión se definió a 0x0000 , lo cual no es deseable en la mayoría de casos. Si omites el argumento a bossac 1.9 o superior, probablemente vas  a recibir un error de “Verify Failed” o verificación fallida.

Recuerda cambiar la opción -p o --port para usar el mismo puerto que en tu Mac.

Reemplaza el nombre abajo por el archivo que has descargado de tipo .bin , teniendo en cuenta que ¡varía dependiendo de tu tarjeta!

Utilizando bossac versiones 1.7.0, 1.8

No existe el parámetro --offset. Utiliza el comando de la siguiente forma:

bossac -p /dev/cu.usbmodem14301 -e -w -v -R adafruit-circuitpython-
nombretarjeta-version.bin

Por ejemplo,

bossac -p /dev/cu.usbmodem14301 -e -w -v -R adafruit-circuitpython-feather_m0_express-3.0.0.bin

Usando bossac para versiones 1.9 y superiores

Para tarjetas M0, las cuales tienen 8kB para el gestor de arranque, debes especificar --offset=0x2000 , por ejemplo:
bossac -p /dev/cu.usbmodem14301 -e -w -v -R --offset=0x2000 adafruit-circuitpython-feather_m0_express-3.0.0.bin

Para tarjetas M4, las cuales tienen 16kB para el gestor de arranque, debes especificar --offset=0x4000 , por ejemplo:

bossac -p /dev/cu.usbmodem14301 -e -w -v -R --offset=0x4000 adafruit-circuitpython-feather_m4_express-3.0.0.bin

Esto va a (e) borrar la memoria en el chip, (w) escribir el archivo indicado, (v) verifiaar la escritura y (R) reinicia la tarjeta. En Linux o MacOS vas a querer ejecutar el comando con sudo ./bossac ... , o agregarte primero al grupo de dialout.

Luego de que BOSSA carga el firmware vas a ver una salida similar a la siguiente:


Puedes reiniciar manualmente la tarjeta dando click al botón de reset, que algunas veces es necesario para despertar la tarjeta. Las tarjetas Express es posible que muestre una advertencia de haber expulsado incorrectamente una unidad de disco USB, la cual se puede ignorar sin problemas. ¡Nada importante se estaba escribiendo a la unidad de disco!


Depuración
De vez en cuando, 

From time to time, you will run into issues when working with CircuitPython. Here are a few things you may encounter
and how to resolve them.
As we continue to develop CircuitPython and create new releases, we will stop supporting older releases.
Visit https://circuitpython.org/downloads to download the latest version of CircuitPython for your board. You
must download the CircuitPython Library Bundle that matches your version of CircuitPython. Please update
CircuitPython and then visit https://circuitpython.org/libraries to download the latest Library Bundle.
Always Run the Latest Version of CircuitPython and Libraries
As we continue to develop CircuitPython and create new releases, we will stop supporting older releases. You need to
update to the latest CircuitPython. (https://adafru.it/Em8).
You need to download the CircuitPython Library Bundle that matches your version of CircuitPython. Please update
CircuitPython and then download the latest bundle (https://adafru.it/ENC).
As we release new versions of CircuitPython, we will stop providing the previous bundles as automatically created
downloads on the Adafruit CircuitPython Library Bundle repo. If you must continue to use an earlier version, you can
still download the appropriate version of mpy-cross from the particular release of CircuitPython on the CircuitPython
repo and create your own compatible .mpy library files. However, it is best to update to the latest for both
CircuitPython and the library bundle.
I have to continue using CircuitPython 3.x or 2.x, where can I find compatible
libraries?
We are no longer building or supporting the CircuitPython 2.x and 3.x library bundles. We highly encourage you to
update CircuitPython to the latest version (https://adafru.it/Em8) and use the current version of the
libraries (https://adafru.it/ENC). However, if for some reason you cannot update, you can find the last available 2.x
build here (https://adafru.it/FJA) and the last available 3.x build here (https://adafru.it/FJB).
CPLAYBOOT, TRINKETBOOT, FEATHERBOOT, or GEMMABOOT Drive Not
Present
You may have a different board.
Only Adafruit Express boards and the Trinket M0 and Gemma M0 boards ship with the UF2 bootloader
(https://adafru.it/zbX)installed. Feather M0 Basic, Feather M0 Adalogger, and similar boards use a regular Arduino-
compatible bootloader, which does not show a boardnameBOOT drive.
MakeCode
If you are running a MakeCode (https://adafru.it/zbY) program on Circuit Playground Express, press the reset button just
once to get the CPLAYBOOT drive to show up. Pressing it twice will not work.
Windows 10
Did you install the Adafruit Windows Drivers package by mistake? You don't need to install this package on Windows 10
for most Adafruit boards. The old version (v1.5) can interfere with recognizing your device. Go to Settings -> Apps and

uninstall all the "Adafruit" driver programs.
Windows 7
The latest version of the Adafruit Windows Drivers (version 2.0.0.0 or later) will fix the missing boardnameBOOT drive
problem on Windows 7. To resolve this, first uninstall the old versions of the drivers:
Unplug any boards. In Uninstall or Change a Program (Control Panel->Programs->Uninstall a program), uninstall
everything named "Windows Driver Package - Adafruit Industries LLC ...".
Now install the new 2.3.0.0 (or higher) Adafruit Windows Drivers Package:
https://adafru.it/AB0

When running the installer, you'll be shown a list of drivers to choose from. You can check and uncheck the
boxes to choose which drivers to install.
You should now be done! Test by unplugging and replugging the board. You should see the CIRCUITPY drive, and
when you double-click the reset button (single click on Circuit Playground Express running MakeCode), you should see
the appropriate boardnameBOOT drive.
Let us know in the Adafruit support forums (https://adafru.it/jIf) or on the Adafruit Discord () if this does not work for you!
Windows Explorer Locks Up When Accessing boardnameBOOT Drive
On Windows, several third-party programs we know of can cause issues. The symptom is that you try to access the
boardnameBOOT drive, and Windows or Windows Explorer seems to lock up. These programs are known to cause
trouble:
AIDA64: to fix, stop the program. This problem has been reported to AIDA64. They acquired hardware to test,
and released a beta version that fixes the problem. This may have been incorporated into the latest release.
Please let us know in the forums if you test thi.s
Hard Disk Sentinel
Kaspersky anti-virus: To fix, you may need to disable Kaspersky completely. Disabling some aspects of
Kaspersky does not always solve the problem. This problem has been reported to Kaspersky.
Copying UF2 to boardnameBOOT Drive Hangs at 0% Copied
On Windows, a Western DIgital (WD) utility that comes with their external USB drives can interfere with copying UF2
files to the boardnameBOOT drive. Uninstall that utility to fix the problem.
CIRCUITPY Drive Does Not Appear
Kaspersky anti-virus can block the appearance of the CIRCUITPY drive. We haven't yet figured out a settings change
that prevents this. Complete uninstallation of Kaspersky fixes the problem.
Norton anti-virus can interfere with CIRCUITPY . A user has reported this problem on Windows 7. The user turned off
both Smart Firewall and Auto Protect, and CIRCUITPY then appeared.
Serial Console in Mu Not Displaying Anything
There are times when the serial console will accurately not display anything, such as, when no code is currently
running, or when code with no serial output is already running before you open the console. However, if you find
yourself in a situation where you feel it should be displaying something like an error, consider the following.
Depending on the size of your screen or Mu window, when you open the serial console, the serial console panel may
be very small. This can be a problem. A basic CircuitPython error takes 10 lines to display!
Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
File "code.py", line 7
SyntaxError: invalid syntax
Press any key to enter the REPL. Use CTRL-D to reload.
More complex errors take even more lines!
Therefore, if your serial console panel is five lines tall or less, you may only see blank lines or blank lines followed by
Press any key to enter the REPL. Use CTRL-D to reload.. If this is the case, you need to either mouse over the top of
the panel to utilise the option to resize the serial panel, or use the scrollbar on the right side to scroll up and find your
message.
This applies to any kind of serial output whether it be error messages or print statements. So before you start trying to
debug your problem on the hardware side, be sure to check that you haven't simply missed the serial messages due to
serial output panel height.
CircuitPython RGB Status Light
The Feather M0 Express, Feather M4 Express, Metro M0 Express, Metro M4 Express, ItsyBitsy M0 Express, ItsyBitsy M4
Express, Gemma M0, and Trinket M0 all have a single NeoPixel or DotStar RGB LED on the board that indicates the
status of CircuitPython.
Circuit Playground Express does NOT have a status LED. The LEDs will pulse green when in the bootloader. They do
NOT indicate any status while running CircuitPython.
Here's what the colors and blinking mean:
steady GREEN: code.py (or code.txt , main.py , or main.txt ) is running
pulsing GREEN: code.py (etc.) has finished or does not exist
steady YELLOW at start up: (4.0.0-alpha.5 and newer) CircuitPython is waiting for a reset to indicate that it should
start in safe mode
pulsing YELLOW: Circuit Python is in safe mode: it crashed and restarted
steady WHITE: REPL is running
steady BLUE: boot.py is running
Colors with multiple flashes following indicate a Python exception and then indicate the line number of the error. The
color of the first flash indicates the type of error:
GREEN: IndentationError
CYAN: SyntaxError
WHITE: NameError
ORANGE: OSError
PURPLE: ValueError
YELLOW: other error
These are followed by flashes indicating the line number, including place value. WHITE flashes are thousands' place,
BLUE are hundreds' place, YELLOW are tens' place, and CYAN are one's place. So for example, an error on line 32
would flash YELLOW three times and then CYAN two times. Zeroes are indicated by an extra-long dark gap.
ValueError: Incompatible .mpy file.
This error occurs when importing a module that is stored as a mpy binary file that was generated by a different
version of CircuitPython than the one its being loaded into. In particular, the mpy binary format changed between
CircuitPython versions 2.x and 3.x, as well as between 1.x and 2.x.
So, for instance, if you upgraded to CircuitPython 3.x from 2.x you’ll need to download a newer version of the library
that triggered the error on import . They are all available in the Adafruit bundle (https://adafru.it/y8E).
Make sure to download a version with 2.0.0 or higher in the filename if you're using CircuitPython version 2.2.4, and
the version with 3.0.0 or higher in the filename if you're using CircuitPython version 3.0.
CIRCUITPY Drive Issues
You may find that you can no longer save files to your CIRCUITPY drive. You may find that your CIRCUITPY stops
showing up in your file explorer, or shows up as NO_NAME . These are indicators that your filesystem has issues.
First check - have you used Arduino to program your board? If so, CircuitPython is no longer able to provide the USB
services. Reset the board so you get a boardnameBOOT drive rather than a CIRCUITPY drive, copy the latest version
of CircuitPython ( .uf2 ) back to the board, then Reset. This may restore CIRCUITPY functionality.
If still broken - When the CIRCUITPY disk is not safely ejected before being reset by the button or being disconnected
from USB, it may corrupt the flash drive. It can happen on Windows, Mac or Linux.
In this situation, the board must be completely erased and CircuitPython must be reloaded onto the board.
You WILL lose everything on the board when you complete the following steps. If possible, make a copy of
your code before continuing.
Easiest Way: Use storage.erase_filesystem()
Starting with version 2.3.0, CircuitPython includes a built-in function to erase and reformat the filesystem. If you have an
older version of CircuitPython on your board, you can update to the newest version (https://adafru.it/Amd) to do this.
1. Connect to the CircuitPython REPL (https://adafru.it/Bec) using Mu or a terminal program.
2. Type:
>>> import storage
>>> storage.erase_filesystem()
CIRCUITPY will be erased and reformatted, and your board will restart. That's it!
Old Way: For the Circuit Playground Express, Feather M0 Express, and Metro M0 Express:
If you can't get to the REPL, or you're running a version of CircuitPython before 2.3.0, and you don't want to upgrade,
you can do this.
1. Download the correct erase file:
https://adafru.it/AdI
https://adafru.it/AdI
https://adafru.it/AdJ
https://adafru.it/AdJ
https://adafru.it/EVK
https://adafru.it/EVK
https://adafru.it/AdK
https://adafru.it/AdK
https://adafru.it/EoM
https://adafru.it/EoM
https://adafru.it/DjD
https://adafru.it/DjD
https://adafru.it/DBA
https://adafru.it/DBA
https://adafru.it/Eca
https://adafru.it/Eca
https://adafru.it/Gnc
https://adafru.it/Gnc
https://adafru.it/GAN
https://adafru.it/GAN
https://adafru.it/GAO
https://adafru.it/GAO
2. Double-click the reset button on the board to bring up the boardnameBOOT drive.
3. Drag the erase .uf2 file to the boardnameBOOT drive.
4. The onboard NeoPixel will turn yellow or blue, indicating the erase has started.
5. After approximately 15 seconds, the mainboard NeoPixel will light up green. On the NeoTrellis M4 this is the first
NeoPixel on the grid
6. Double-click the reset button on the board to bring up the boardnameBOOT drive.
7. Drag the appropriate latest release of CircuitPython (https://adafru.it/Amd) .uf2 file to
the boardnameBOOT drive.
It should reboot automatically and you should see CIRCUITPY in your file explorer again.
If the LED flashes red during step 5, it means the erase has failed. Repeat the steps starting with 2.
If you haven't already downloaded the latest release of CircuitPython for your board, check out the installation
page (https://adafru.it/Amd). You'll also need to install your libraries and code!
Old Way: For Non-Express Boards with a UF2 bootloader (Gemma M0, Trinket M0):
If you can't get to the REPL, or you're running a version of CircuitPython before 2.3.0, and you don't want to upgrade,
you can do this.
1. Download the erase file:
https://adafru.it/AdL
https://adafru.it/AdL
Double-click the reset button on the board to bring up the boardnameBOOT drive.
Drag the erase .uf2 file to the boardnameBOOT drive.
The boot LED will start flashing again, and the boardnameBOOT drive will reappear.
Drag the appropriate latest release CircuitPython (https://adafru.it/Amd) .uf2 file to the boardnameBOOT drive.
It should reboot automatically and you should see CIRCUITPY in your file explorer again.
If you haven't already downloaded the latest release of CircuitPython for your board, check out the installation
page (https://adafru.it/Amd) You'll also need to install your libraries and code!
Old Way: For non-Express Boards without a UF2 bootloader (Feather M0 Basic Proto,
Feather Adalogger, Arduino Zero):
If you are running a version of CircuitPython before 2.3.0, and you don't want to upgrade, or you can't get to the REPL,
you can do this.
Just follow these directions to reload CircuitPython using bossac (https://adafru.it/Bed), which will erase and re-create
CIRCUITPY .
Running Out of File Space on Non-Express Boards
The file system on the board is very tiny. (Smaller than an ancient floppy disk.) So, its likely you'll run out of space but
don't panic! There are a couple ways to free up space.
The board ships with the Windows 7 serial driver too! Feel free to delete that if you don't need it or have already
installed it. Its ~12KiB or so.
Delete something!
The simplest way of freeing up space is to delete files from the drive. Perhaps there are libraries in the lib folder that
you aren't using anymore or test code that isn't in use. Don't delete the lib folder completely, though, just remove
what you don't need.
Use tabs
One unique feature of Python is that the indentation of code matters. Usually the recommendation is to indent code
with four spaces for every indent. In general, we recommend that too. However, one trick to storing more human-
readable code is to use a single tab character for indentation. This approach uses 1/4 of the space for indentation and
can be significant when we're counting bytes.
Mac OSX loves to add extra files.
Page 90 of 95Luckily you can disable some of the extra hidden files that Mac OSX adds by running a few commands to disable
search indexing and create zero byte placeholders. Follow the steps below to maximize the amount of space available
on OSX:
Prevent & Remove Mac OSX Hidden Files
First find the volume name for your board. With the board plugged in run this command in a terminal to list all the
volumes:
ls -l /Volumes
Look for a volume with a name like CIRCUITPY (the default for CircuitPython). The full path to the volume is
the /Volumes/CIRCUITPY path.
Now follow the steps from this question (https://adafru.it/u1c) to run these terminal commands that stop hidden files
from being created on the board:
mdutil -i off /Volumes/CIRCUITPY
cd /Volumes/CIRCUITPY
rm -rf .{,_.}{fseventsd,Spotlight-V*,Trashes}
mkdir .fseventsd
touch .fseventsd/no_log .metadata_never_index .Trashes
cd -
Replace /Volumes/CIRCUITPY in the commands above with the full path to your board's volume if it's different. At this
point all the hidden files should be cleared from the board and some hidden files will be prevented from being created.
However there are still some cases where hidden files will be created by Mac OSX. In particular if you copy a file that
was downloaded from the internet it will have special metadata that Mac OSX stores as a hidden file. Luckily you can
run a copy command from the terminal to copy files without this hidden metadata file. See the steps below.
Copy Files on Mac OSX Without Creating Hidden Files
Once you've disabled and removed hidden files with the above commands on Mac OSX you need to be careful to copy
files to the board with a special command that prevents future hidden files from being created. Unfortunately
you cannot use drag and drop copy in Finder because it will still create these hidden extended attribute files in some
cases (for files downloaded from the internet, like Adafruit's modules).
To copy a file or folder use the -X option for the cp command in a terminal. For example to copy a foo.mpy file to the
board use a command like:
Page 91 of 95cp -X foo.mpy /Volumes/CIRCUITPY
(Replace foo.mpy with the name of the file you want to copy.) Or to copy a folder and all of its child files/folders use a
command like:
cp -rX folder_to_copy /Volumes/CIRCUITPY
If you are copying to the lib folder, or another folder, make sure it exists before copying.
# if lib does not exist, you'll create a file named lib !
cp -X foo.mpy /Volumes/CIRCUITPY/lib
# This is safer, and will complain if a lib folder does not exist.
cp -X foo.mpy /Volumes/CIRCUITPY/lib/
Other Mac OSX Space-Saving Tips
If you'd like to see the amount of space used on the drive and manually delete hidden files here's how to do so. First
list the amount of space used on the CIRCUITPY drive with the df command:
Lets remove the ._ files first.

Whoa! We have 13Ki more than before! This space can now be used for libraries and code!

CircuitPython Essentials
You've gone through the Welcome to CircuitPython guide. You've already gotten everything setup, and you've gotten
CircuitPython running. Great! Now what? CircuitPython Essentials!
There are a number of core modules built into CircuitPython and commonly used libraries available. The Essentials
guide will introduce you to these and show you an example of how to use each one.
It's time to get started learning the CircuitPython Essentials (https://adafru.it/cpy-essentials)!

